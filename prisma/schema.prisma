// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  SUPER_ADMIN
  CS_ADMIN
  DEPARTMENT_HEAD
  TEAM_LEADER
  CS_AGENT
  CS_OPERATION
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum TicketStatus {
  WAIT
  PROCESS
  CLOSED
  DONE
  SLA_ROV      // SLA Risk of Violation
  SLA_POV      // SLA Point of Violation
  CANCELLED
}

enum TicketType {
  INQUIRY
  COMPLAINT
  REQUEST
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ChannelType {
  EMAIL
  FACEBOOK
  ZALO
  TELEGRAM
  DIRECT_CHAT
  PHONE
}

enum PermissionType {
  CREATE
  READ
  UPDATE
  DELETE
  ASSIGN
  APPROVE
  EXPORT
  IMPORT
  MANAGE
}

enum ResourceType {
  USER
  DEPARTMENT
  TEAM
  TICKET
  CUSTOMER
  CHANNEL
  SLA
  NOTIFICATION
  REPORT
  PERMISSION
}

enum AttachmentType {
  IMAGE
  DOCUMENT
  VIDEO
  AUDIO
  OTHER
}

enum ChannelStatus {
  ACTIVE
  INACTIVE
  ERROR
}

enum SLAStatus {
  ACTIVE
  INACTIVE
}

// Models

model Department {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  headId      String?  @unique // Department head
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  head          User?          @relation("DepartmentHead", fields: [headId], references: [id])
  users         User[]         @relation("DepartmentMembers")
  teams         Team[]
  tickets       Ticket[]
  channelAgents ChannelAgent[] // Department channel assignments

  @@map("departments")
}

model Team {
  id           String   @id @default(cuid())
  name         String
  description  String?
  departmentId String
  leaderId     String?  @unique // Team leader
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  department    Department     @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  leader        User?          @relation("TeamLeader", fields: [leaderId], references: [id])
  members       User[]         @relation("TeamMembers")
  workingHours  WorkingHours[]
  tickets       Ticket[]
  channelAgents ChannelAgent[] // Team channel assignments

  @@unique([departmentId, name])
  @@map("teams")
}

model WorkingHours {
  id        String   @id @default(cuid())
  teamId    String
  dayOfWeek Int      // 0 = Sunday, 1 = Monday, ..., 6 = Saturday
  startTime String   // Format: "HH:mm"
  endTime   String   // Format: "HH:mm"
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, dayOfWeek])
  @@map("working_hours")
}

model User {
  id                String     @id @default(cuid())
  email             String     @unique
  password          String
  firstName         String
  lastName          String
  phone             String?
  avatar            String?
  status            UserStatus @default(ACTIVE)
  departmentId      String?
  teamId            String?
  roleId            String     // Required role ID
  canAccessReports  Boolean    @default(false) // CS Admin assigns report access
  settings          Json?      // User-specific settings
  lastLoginAt       DateTime?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  // Relations
  department        Department?      @relation("DepartmentMembers", fields: [departmentId], references: [id])
  team              Team?            @relation("TeamMembers", fields: [teamId], references: [id])
  role              Role             @relation(fields: [roleId], references: [id])
  headedDepartment  Department?      @relation("DepartmentHead")
  ledTeam           Team?            @relation("TeamLeader")
  assignedTickets   Ticket[]         @relation("TicketAssignee")
  createdTickets    Ticket[]         @relation("TicketCreator")
  ticketComments    TicketComment[]
  attachments       Attachment[]     // Uploaded attachments
  channelAgents     ChannelAgent[]
  notifications     Notification[]

  @@map("users")
}

model Customer {
  id         String   @id @default(cuid())
  cif        String   @unique // Customer Identification Number
  externalId String?  // External ID from providers (Facebook, Telegram, etc.)
  firstName  String
  lastName   String
  phone      String?
  email      String?
  address    String?
  idNumber   String?  // CCCD/CMND
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  tickets Ticket[]
  messages ChannelMessage[]

  @@map("customers")
}

model Ticket {
  id              String         @id @default(cuid())
  ticketNumber    String         @unique // Format: [Source] + 6 digits
  title           String
  description     String
  type            TicketType
  priority        TicketPriority @default(MEDIUM)
  status          TicketStatus   @default(WAIT)
  source          String         // Source channel
  customerId      String
  assigneeId      String?
  creatorId       String
  departmentId    String
  teamId          String?
  channelId       String?
  slaId           String?
  firstResponseAt DateTime?
  resolvedAt      DateTime?
  closedAt        DateTime?
  dueDate         DateTime?
  tags            String?        // Comma-separated tags
  metadata        Json?          // Additional metadata
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Relations
  customer     Customer        @relation(fields: [customerId], references: [id])
  assignee     User?           @relation("TicketAssignee", fields: [assigneeId], references: [id])
  creator      User            @relation("TicketCreator", fields: [creatorId], references: [id])
  department   Department      @relation(fields: [departmentId], references: [id])
  team         Team?           @relation(fields: [teamId], references: [id])
  channel      Channel?        @relation(fields: [channelId], references: [id])
  sla          SLA?            @relation(fields: [slaId], references: [id])
  comments     TicketComment[]
  attachments  Attachment[]    // Ticket attachments
  slaTracking  SLATracking[]

  @@map("tickets")
}

model TicketComment {
  id        String   @id @default(cuid())
  content   String
  isInternal Boolean @default(false) // Internal discussion vs customer communication
  ticketId  String
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  ticket      Ticket       @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  author      User         @relation(fields: [authorId], references: [id])
  attachments Attachment[] // Comment attachments

  @@map("ticket_comments")
}



model Channel {
  id          String        @id @default(cuid())
  name        String        @unique
  type        ChannelType
  status      ChannelStatus @default(ACTIVE)
  config      Json          // Channel-specific configuration (encrypted)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  agents  ChannelAgent[]
  tickets Ticket[]
  messages ChannelMessage[]

  @@map("channels")
}

model ChannelAgent {
  id           String   @id @default(cuid())
  channelId    String
  userId       String?  // Individual user assignment
  departmentId String?  // Department assignment
  teamId       String?  // Team assignment
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  channel    Channel     @relation(fields: [channelId], references: [id], onDelete: Cascade)
  user       User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  department Department? @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  team       Team?       @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([channelId, userId])
  @@unique([channelId, departmentId])
  @@unique([channelId, teamId])
  @@map("channel_agents")
}

model ChannelMessage {
  id          String   @id @default(cuid())
  externalId  String?  // ID from external platform
  content     String
  messageType String   // text, image, file, etc.
  direction   String   // inbound, outbound
  channelId   String
  customerId  String?
  ticketId    String?
  metadata    Json?    // Platform-specific metadata
  createdAt   DateTime @default(now())

  // Relations
  channel  Channel   @relation(fields: [channelId], references: [id], onDelete: Cascade)
  customer Customer? @relation(fields: [customerId], references: [id])

  @@map("channel_messages")
}

model SLA {
  id                    String    @id @default(cuid())
  name                  String    @unique
  description           String?
  ticketType            TicketType
  priority              TicketPriority
  firstResponseTimeHours Int      // Hours for first response
  resolutionTimeHours   Int       // Hours for resolution
  businessHoursOnly     Boolean   @default(true)
  status                SLAStatus @default(ACTIVE)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // Relations
  tickets     Ticket[]
  slaTracking SLATracking[]

  @@map("slas")
}

model SLATracking {
  id                   String    @id @default(cuid())
  ticketId             String
  slaId                String
  firstResponseDue     DateTime
  resolutionDue        DateTime
  firstResponseAt      DateTime?
  resolvedAt           DateTime?
  firstResponseBreach  Boolean   @default(false)
  resolutionBreach     Boolean   @default(false)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // Relations
  ticket Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  sla    SLA    @relation(fields: [slaId], references: [id])

  @@unique([ticketId, slaId])
  @@map("sla_tracking")
}

// Attachment Model for Tickets and Comments
model Attachment {
  id          String         @id @default(cuid())
  fileName    String         // Original file name
  filePath    String         // Storage path
  fileSize    Int            // File size in bytes
  mimeType    String         // MIME type
  type        AttachmentType // Attachment category
  ticketId    String?        // For ticket attachments
  commentId   String?        // For comment attachments
  uploadedBy  String         // User who uploaded
  createdAt   DateTime       @default(now())

  // Relations
  ticket      Ticket?        @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  comment     TicketComment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  uploader    User           @relation(fields: [uploadedBy], references: [id])

  @@map("attachments")
}

// Permission Management Models
model Permission {
  id          String         @id @default(cuid())
  name        String         // e.g., "create_ticket", "manage_users"
  description String?
  resource    ResourceType   // What resource this permission applies to
  action      PermissionType // What action is allowed
  conditions  Json?          // Additional conditions (e.g., own department only)
  isActive    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  rolePermissions RolePermission[]

  @@unique([resource, action, name])
  @@map("permissions")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique // e.g., "Department Manager", "Senior Agent"
  description String?
  type        UserRole // Built-in role type (SUPER_ADMIN, CS_ADMIN, etc.)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  rolePermissions RolePermission[]
  users           User[]

  @@map("roles")
}

model RolePermission {
  id           String @id @default(cuid())
  roleId       String
  permissionId String
  conditions   Json?  // Override or additional conditions
  createdAt    DateTime @default(now())

  // Relations
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}



model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  type      String   // sla_violation, ticket_assigned, etc.
  userId    String
  ticketId  String?
  isRead    Boolean  @default(false)
  metadata  Json?
  createdAt DateTime @default(now())
  readAt    DateTime?

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String   // CREATE, UPDATE, DELETE
  entity    String   // TICKET, USER, etc.
  entityId  String
  userId    String?
  changes   Json?    // What changed
  metadata  Json?    // Additional context
  createdAt DateTime @default(now())

  @@map("audit_logs")
}
